<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jock.Net.TcpJson</name>
    </assembly>
    <members>
        <member name="T:Jock.Net.TcpJson.CancellationToken">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.CancellationToken.IsCancellationRequested">
            <summary>
            IsCancellationRequested
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.CancellationTokenSource">
            <summary>
            CancellationToken Source
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.CancellationTokenSource.Token">
            <summary>
            CancellationToken
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.CancellationTokenSource.IsCancellationRequested">
            <summary>
            IsCancellationRequested
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.CancellationTokenSource.Cancel">
            <summary>
            Set source require cancel current async op
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.SafeThreadObject">
            <summary>
            Provides an internal running thread management object
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.SafeThreadObject.IsRunning">
            <summary>
            Whether the internal thread is running
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.SafeThreadObject.ThreadState">
            <summary>
            Gets a value containing the states of the internal thread.
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.SafeThreadObject.Start">
            <summary>
            Start the service thread
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.SafeThreadObject.OnStop">
            <summary>
            Calling the <c>Stoped</c> event
            </summary>
        </member>
        <member name="E:Jock.Net.TcpJson.SafeThreadObject.Stoped">
            <summary>
            Triggered when an internal thread is stopped
            </summary>
        </member>
        <member name="E:Jock.Net.TcpJson.SafeThreadObject.UnhandledException">
            <summary>
            Occurs when an unhandled exception occurs on an internal thread
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.SafeThreadObject.DoRun(Jock.Net.TcpJson.CancellationToken)">
            <summary>
            Triggered when an unhandled exception occurs on an internal thread
            </summary>
            <param name="token">Triggering a cancellation notification when the user calls the Stop method</param>
        </member>
        <member name="M:Jock.Net.TcpJson.SafeThreadObject.Stop">
            <summary>
            Notifies the internal thread to stop running
            <para>
            The internal execution thread must handle the <c>CancellationToken</c> to respond to the stop state.
            </para>
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonClient">
            <summary>
            Json Communication Client
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.#ctor">
            <summary>
            Create a <c>TcpJsonClient</c> with out <c>IPEndPoint</c>.
            Must start by `Start(IPEndPoint remoteEP)` method.
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.Start(System.Net.IPEndPoint,Jock.Net.TcpJson.TcpJsonConnectionDeniedEventHandler)">
            <summary>
            Start core thread
            </summary>
            <param name="remoteEP">the Endpoint you want connect</param>
            <param name="connectionDeniedEventHandler">a eventhandler invoke if connection denied</param>
            <exception cref="T:System.ArgumentNullException">remoteEP and connectionDeniedEventHandler can not null</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Connect to the specified service side
            </summary>
            <param name="remoteEP">The service endpoint to connect to</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.GetNamedStream(System.String)">
            <summary>
            Gets a named Stream object
            </summary>
            <param name="name">Stream name</param>
            <returns>Named stream</returns>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonClient.Client">
            <summary>
            The associated <c>TcpClient</c> object
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonClient.PingTimeSpan">
            <summary>
            Interval for automatic Ping
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonClient.Session">
            <summary>
            Correlation variable Pool, Hot any value in local <c>TcpJsonClient</c>
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonClient.Cookies">
            <summary>
            Cookies what can auto sync between two connected <c>TcpJsonClient</c>
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.DoRun(Jock.Net.TcpJson.CancellationToken)">
            <summary>
            Internal thread Run code
            </summary>
            <param name="token">Triggering a cancellation notification when the user calls the Stop method</param>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.SendCommand(System.String,System.Action)">
            <summary>
            Send a command
            </summary>
            <param name="command">Command</param>
            <param name="callback">Post-Send callback</param>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.SendObject``1(``0,System.Action)">
            <summary>
            Send an Object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="obj">Object</param>
            <param name="callback">Post-Send callback</param>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.SendRequest``1(System.String,``0,System.Int32)">
            <summary>
            Sync Send an Request and wait Response
            </summary>
            <typeparam name="TRequest">Response Object Type</typeparam>
            <param name="uri">A request uri</param>
            <param name="obj">Request object</param>
            <param name="millisecondsTimeout">Response timeout milliseconds, Default is one Minute.</param>
            <returns>Response object</returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.SendBytes(System.Byte[],System.Action)">
            <summary>
            Send a bytes block
            </summary>
            <param name="bytes">data to send</param>
            <param name="callback">Post-Send callback</param>
            <exception cref="T:System.ArgumentNullException">
            <c>bytes</c> is null
            </exception>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.OnStop">
            <summary>
            Triggering stoped Events
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.OnReceiveCommand(System.Action{System.String})">
            <summary>
            Register callback when command is received
            </summary>
            <param name="callback">callback method</param>
            <returns></returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.OnReceive``1(System.Action{``0,Jock.Net.TcpJson.TcpJsonClient})">
            <summary>
            Register callback when a specific type of object is received
            </summary>
            <typeparam name="T">Type of object received</typeparam>
            <param name="callback">callback method</param>
            <returns></returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.OnReceiveRequest``2(System.String,System.Func{``0,Jock.Net.TcpJson.TcpJsonClient,``1})">
            <summary>
            Register callback response specific type request
            </summary>
            <typeparam name="TRequest">The Request type can be handle</typeparam>
            <typeparam name="TResponse">The response type callback return</typeparam>
            <param name="uri">A request resorce uri</param>
            <param name="callback">Invoke when Receive a <c>TRequest</c> request</param>
            <returns></returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.OnReceiveBytes(System.Action{System.Byte[],Jock.Net.TcpJson.TcpJsonClient})">
            <summary>
            Register callback when a bytes block is received
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonClient.OnStoped(System.Action{Jock.Net.TcpJson.TcpJsonClient})">
            <summary>
            Callback when stopped
            </summary>
            <param name="callback">callback method</param>
            <returns></returns>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonConnectionDeniedEventArgs">
            <summary>
            EventArgs for TcpJsonClient connection denied
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonConnectionDeniedEventArgs.Client">
            <summary>
            TcpJsonClient instance
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonConnectionDeniedEventArgs.Retry">
            <summary>
            set True if want try reconnection
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonConnectionDeniedEventHandler">
            <summary>
            Delegate for TcpJsonClient connection denied
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonCookies">
            <summary>
            Hold a collection of name string cookies, Auto sync between tow connected <c>TcpJsonClient</c>.
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonCookies.Item(System.String)">
            <summary>
            Get or set cookie by spec key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonCookies.Keys">
            <summary>
            Gets a collection containing the keys in the <c>TcpJsonCookies</c>
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonCookies.Values">
            <summary>
            Gets a collection containing the values in the <c>TcpJsonCookies</c>
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonCookies.Count">
            <summary>
            Gets this number of cookies contained in the <c>TcpJsonCookies</c>
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonCookies.IsReadOnly">
            <summary>
            Cookies is read only, allow return <c>false</c>.
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.Add(System.String,System.String)">
            <summary>
            Add a cookie to the cookies.
            </summary>
            <param name="key">Cookie name</param>
            <param name="value">Cookie value</param>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Add a cookie to the cookies
            </summary>
            <param name="item">A <c>KeyValuePair&lt;string, string&gt;</c> has Key and Value</param>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.BeginInit">
            <summary>
            Begin a init, This will pause cookie sync.
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.Clear">
            <summary>
            Clear all cookies
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <c>TcpJsonCookies</c>contains the specified key and equal value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.ContainsKey(System.String)">
            <summary>
            Determines whether the <c>TcpJsonCookies</c>contains the specified key.
            </summary>
            <param name="key">The key to locate in the <c>TcpJsonCookies</c></param>
            <returns></returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copy all item to array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.EndInit">
            <summary>
            End a init, This will restore cookie sync.
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <c>TcpJsonCookies</c>
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the <c>TcpJsonCookies</c>
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the value with the specified key from the <c>TcpJsonCookies</c>
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonCookies.TryGetValue(System.String,System.String@)">
            <summary>
            Try Get Value with the specified key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonNamedStream">
            <summary>
            Provides a named stream associated with the <c>TcpJsonClient</c> , which re-uses the existing network stream channel
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.Name">
            <summary>
            Get named
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.CanRead">
            <summary>
            Gets whether the stream is readable and always returns true
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.CanSeek">
            <summary>
            Whether the stream can be accessed in a non-sequential order and always returns false
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.CanWrite">
            <summary>
            Whether the stream is writable and always returns false
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.AutoFlush">
            <summary>
            Whether auto invoke <c>Flush()</c> after <c>Write()</c> is invoked 
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.Length">
            <summary>
            Get stream length, always trigger <c>NotSupportedException</c> exception
            </summary>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.Position">
            <summary>
            Gets or sets the stream access offset, which always triggers the <c>notsupportedexception</c> exception
            </summary>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonNamedStream.Flush">
            <summary>
            Flush stream send all write data to remote
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonNamedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to a buffer.
            </summary>
            <param name="buffer">
            When this method returns, contains the specified byte array with the values between
            offset and (offset + count - 1) replaced by the characters read from the current
            stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing data from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to read.
            </param>
            <returns>
            The total number of bytes written into the buffer. This can be less than the
                number of bytes requested if that number of bytes are not currently available,
                or zero if the end of the stream is reached before any bytes are read.</returns>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonNamedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek access position, Always throw <c>NotSupportedException</c>
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonNamedStream.SetLength(System.Int64)">
            <summary>
            Seek stream length, Always throw <c>NotSupportedException</c>
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonNamedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from a buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonNamedStream.DataAvailable">
            <summary>
            Gets the number of characters received that have not yet been read
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonServer">
            <summary>
            Json Communication Service Side
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonServer.#ctor(System.Net.IPEndPoint)">
             <summary>
            Create a Json Communication server
             </summary>
             <param name="listenerPoint">Listening port</param>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonServer.WaitPendingTime">
            <summary>
            Test interval to wait for next connection (microseconds)
            </summary>
        </member>
        <member name="E:Jock.Net.TcpJson.TcpJsonServer.Connecting">
            <summary>
            When a remote client connection occurs, you can set the <c>Cancel</c> property to cancel the connection
            </summary>
        </member>
        <member name="E:Jock.Net.TcpJson.TcpJsonServer.Connected">
            <summary>
            Triggered when a remote client connection is complete
            </summary>
        </member>
        <member name="M:Jock.Net.TcpJson.TcpJsonServer.DoRun(Jock.Net.TcpJson.CancellationToken)">
            <summary>
            Internal thread Run code
            </summary>
            <param name="token">Triggering a cancellation notification when the user calls the Stop method</param>
        </member>
        <member name="T:Jock.Net.TcpJson.ConnectingEventHandler">
            <summary>
            Callback when providing a new client connection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Jock.Net.TcpJson.ConnectingEventArgs">
            <summary>
            Callback parameters when a new client connects
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.ConnectingEventArgs.Client">
            <summary>
            <c>TcpClient</c> object to which the client establishes a connection
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.ConnectedEventHandler">
            <summary>
            Provides callbacks when a client completes a connection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Jock.Net.TcpJson.ConnectedEventArgs">
            <summary>
            Callback parameters when the client finishes the connection
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.ConnectedEventArgs.ServerClient">
            <summary>
            Client Communication End Object
            </summary>
        </member>
        <member name="T:Jock.Net.TcpJson.TcpJsonServerClient">
            <summary>
            The communication side of the Json server
            </summary>
        </member>
        <member name="P:Jock.Net.TcpJson.TcpJsonServerClient.Server">
            <summary>
            Get the relevant service side <c>TcpJsonServer</c>
            </summary>
        </member>
    </members>
</doc>
